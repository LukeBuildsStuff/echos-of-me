# Production-ready Docker Compose for Echoes of Me
# Optimized for local development with cloud-ready architecture
version: '3.8'

services:
  # Main Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: echosofme_app
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://echosofme:secure_dev_password@postgres:5432/echosofme_dev
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3001
      - NEXTAUTH_SECRET=f29c73c05bc1ea75e0afacb0f85478af4443659cdb6bd6bb83f81330a226dbb0
      - RTX_TRAINING_ENABLED=true
      - RTX_GPU_MEMORY_LIMIT=24gb
      - VOICE_STORAGE_PATH=/app/public/voices
      - MONITORING_ENABLED=true
    volumes:
      # Hot reload support
      - .:/app
      - /app/node_modules
      - /app/.next
      # Persistent voice data
      - voice_data:/app/public/voices
      # GPU access for RTX 5090
      - /dev/dri:/dev/dri
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - echosofme_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: echosofme_postgres
    environment:
      POSTGRES_DB: echosofme_dev
      POSTGRES_USER: echosofme
      POSTGRES_PASSWORD: secure_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    networks:
      - echosofme_network
    restart: unless-stopped
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echosofme -d echosofme_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: echosofme_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - echosofme_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      net.core.somaxconn: 1024
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional for local development)
  nginx:
    image: nginx:alpine
    container_name: echosofme_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./config/ssl:/etc/ssl/certs
    depends_on:
      - app
    networks:
      - echosofme_network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: echosofme_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - echosofme_network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: echosofme_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - echosofme_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: echosofme_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - echosofme_network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  echosofme_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  voice_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local