name: Deploy to Railway

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Run tests
        run: |
          # Add test commands when available
          echo "Running tests..."
          # npm test
          
      - name: Test build
        run: npm run build
        env:
          NODE_ENV: production
          # Provide dummy values for build-time env vars
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NEXTAUTH_SECRET: test-secret-for-build
          NEXTAUTH_URL: https://test.example.com
          REDIS_URL: redis://localhost:6379

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Deploy to Railway Staging
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment staging
          railway deploy --service echosofme-staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Run post-deployment tests
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Basic health check
          STAGING_URL="${{ secrets.STAGING_URL }}"
          if [ ! -z "$STAGING_URL" ]; then
            curl -f "$STAGING_URL/api/health" || exit 1
            echo "‚úÖ Staging deployment health check passed"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Database Migration Check
        run: |
          echo "Checking if database migration is needed..."
          # Add migration check logic here
          
      - name: Deploy to Railway Production
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment production
          railway deploy --service echosofme-production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Run database migrations
        run: |
          echo "Running production database migrations..."
          # Set environment variables for migration
          export DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}"
          node scripts/migrate-production.js
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          
      - name: Post-deployment verification
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 60
          
          # Comprehensive health checks
          PROD_URL="${{ secrets.PRODUCTION_URL }}"
          if [ ! -z "$PROD_URL" ]; then
            # Health check
            curl -f "$PROD_URL/api/health" || exit 1
            echo "‚úÖ Production health check passed"
            
            # Database connectivity check
            curl -f "$PROD_URL/api/admin/database/health" || exit 1
            echo "‚úÖ Database connectivity check passed"
            
            # RTX hybrid check (should handle gracefully if RTX is offline)
            curl -f "$PROD_URL/api/training/system-status" || echo "‚ö†Ô∏è RTX system check - expected if RTX is offline"
          fi
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed, initiating rollback..."
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment production
          railway rollback
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  update-rtx-config:
    name: Update RTX Hybrid Configuration
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Update RTX endpoints
        run: |
          echo "üîß RTX Hybrid Configuration Update"
          echo "This job would typically:"
          echo "1. Update Cloudflare Tunnel configuration"
          echo "2. Refresh RTX service endpoints"
          echo "3. Test hybrid connectivity"
          echo "4. Update monitoring dashboards"
          
          # In a real implementation, this would:
          # - SSH into RTX machine
          # - Update tunnel configuration
          # - Restart services if needed
          # - Run connectivity tests

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "‚úÖ Staging deployment successful"
          elif [[ "${{ needs.deploy-staging.result }}" == "failure" ]]; then
            echo "‚ùå Staging deployment failed"
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "‚úÖ Production deployment successful"
          elif [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            echo "‚ùå Production deployment failed"
          fi
          
      # Add Slack/Discord/Email notifications here if needed
      - name: Slack Notification
        if: always()
        run: |
          echo "Would send Slack notification about deployment status"
          # webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}