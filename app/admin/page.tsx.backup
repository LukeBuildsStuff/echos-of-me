'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect, useState, useCallback, Suspense } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import AdminLayout from '@/components/AdminLayout'
import { LazyAdminComponents, AdminModuleLoader, AdminComponentPreloader } from '@/lib/admin-lazy-loader'
import { 
  Users, 
  MessageSquare, 
  Brain, 
  TrendingUp,
  Server,
  Shield,
  Activity,
  AlertTriangle
} from 'lucide-react'

interface AdminStats {
  userStats: {
    total_users: number
    new_today: number
    new_this_week: number
    active_today: number
    active_this_week: number
  }
  responseStats: {
    total_responses: number
    responses_today: number
    responses_this_week: number
    avg_response_length: number
  }
  systemStats: {
    uptime: number
    cpu_usage: number
    memory_usage: number
    active_training_jobs: number
  }
}

export default function AdminDashboard() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [stats, setStats] = useState<AdminStats | null>(null)
  const [loading, setLoading] = useState(true)

  const checkAdminAccess = useCallback(async () => {
    try {
      const response = await fetch('/api/admin/analytics')
      if (response.status === 403) {
        router.push('/dashboard')
        return
      }
      
      if (response.ok) {
        const data = await response.json()
        // Mock additional system stats for demo
        const enhancedStats = {
          ...data,
          systemStats: {
            uptime: 345600, // seconds
            cpu_usage: 34.2,
            memory_usage: 67.8,
            active_training_jobs: 3
          }
        }
        setStats(enhancedStats)
      }
    } catch (error) {
      console.error('Admin access check failed:', error)
      router.push('/dashboard')
    } finally {
      setLoading(false)
    }
  }, [router])

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin')
    } else if (status === 'authenticated') {
      checkAdminAccess()
      // Preload critical admin components after authentication
      AdminComponentPreloader.preloadCriticalComponents()
    }
  }, [status, router, checkAdminAccess])

  if (status === 'loading' || loading) {
    return (
      <AdminLayout>
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4" />
            <p className="text-gray-600">Loading admin dashboard...</p>
          </div>
        </div>
      </AdminLayout>
    )
  }

  if (!session || !stats) {
    return null
  }

  return (
    <AdminLayout
      title="Admin Dashboard"
      subtitle="System overview and management"
      breadcrumbs={[
        { label: 'Admin', href: '/admin' },
        { label: 'Dashboard' }
      ]}
      actions={
        <div className="flex items-center gap-2">
          <Badge variant="destructive" className="text-sm">
            ADMIN ACCESS
          </Badge>
          <Button variant="outline" size="sm" onClick={() => window.location.reload()}>
            <TrendingUp className="h-4 w-4 mr-2" />
            Refresh
          </Button>
        </div>
      }
    >
      <div className="space-y-8">
        {/* Key Metrics - Lazy Loaded */}
        <Suspense fallback={<AdminModuleLoader message="Loading dashboard metrics..." />}>
          <LazyAdminComponents.QuickStats
            stats={[
              {
                id: 'total-users',
                title: 'Total Users',
                value: { current: stats.userStats.total_users },
                trend: { 
                  direction: 'up', 
                  percentage: ((stats.userStats.new_this_week / stats.userStats.total_users) * 100), 
                  period: 'this week' 
                },
                icon: Users,
                onClick: () => router.push('/admin/users')
              },
              {
                id: 'active-today',
                title: 'Active Today',
                value: { current: stats.userStats.active_today },
                trend: { 
                  direction: 'up', 
                  percentage: 15.3, 
                  period: 'vs yesterday' 
                },
                icon: Activity,
                onClick: () => router.push('/admin/users/analytics')
              },
              {
                id: 'total-responses',
                title: 'Total Responses',
                value: { current: stats.responseStats.total_responses },
                trend: { 
                  direction: 'up', 
                  percentage: ((stats.responseStats.responses_this_week / stats.responseStats.total_responses) * 100), 
                  period: 'this week' 
                },
                icon: MessageSquare,
                onClick: () => router.push('/admin/content/responses')
              },
              {
                id: 'training-jobs',
                title: 'Active Training',
                value: { current: stats.systemStats.active_training_jobs },
                trend: { 
                  direction: 'up', 
                  percentage: 25.0, 
                  period: 'vs last hour' 
                },
                icon: Brain,
                onClick: () => router.push('/admin/training')
              }
            ]}
          />
        </Suspense>

        {/* Dashboard Grid */}
        <div className="grid lg:grid-cols-3 gap-8">
          {/* System Status - Lazy Loaded */}
          <div className="lg:col-span-1">
            <Suspense fallback={<AdminModuleLoader message="Loading system status..." />}>
              <LazyAdminComponents.SystemStatus
                title="System Health"
                items={[
                  {
                    id: 'web-server',
                    label: 'Next.js Server',
                    status: 'online',
                    value: `${stats.systemStats.uptime}s uptime`,
                    lastUpdated: 'Just now'
                  },
                  {
                    id: 'database',
                    label: 'PostgreSQL',
                    status: 'online',
                    value: 'Connected',
                    lastUpdated: 'Just now'
                  },
                  {
                    id: 'training-system',
                    label: 'AI Training',
                    status: stats.systemStats.active_training_jobs > 0 ? 'online' : 'warning',
                    value: `${stats.systemStats.active_training_jobs} active jobs`,
                    lastUpdated: 'Just now'
                  },
                  {
                    id: 'gpu-monitoring',
                    label: 'RTX 5090',
                    status: stats.systemStats.cpu_usage > 80 ? 'warning' : 'online',
                    value: `${stats.systemStats.cpu_usage}% usage`,
                    lastUpdated: 'Just now'
                  },
                  {
                    id: 'memory-status',
                    label: 'System Memory',
                    status: stats.systemStats.memory_usage > 85 ? 'warning' : 'online',
                    value: `${stats.systemStats.memory_usage}% used`,
                    lastUpdated: 'Just now'
                  }
                ]}
              />
            </Suspense>
          </div>

          {/* Charts - Lazy Loaded */}
          <div className="lg:col-span-2 space-y-6">
            <Suspense fallback={<AdminModuleLoader message="Loading user growth chart..." />}>
              <LazyAdminComponents.SimpleChart
                title="User Growth (Last 7 Days)"
                data={[
                  { label: 'Mon', value: 23 },
                  { label: 'Tue', value: 31 },
                  { label: 'Wed', value: 28 },
                  { label: 'Thu', value: 35 },
                  { label: 'Fri', value: 42 },
                  { label: 'Sat', value: 38 },
                  { label: 'Sun', value: 45 }
                ]}
                type="bar"
              />
            </Suspense>

            <Suspense fallback={<AdminModuleLoader message="Loading response volume chart..." />}>
              <LazyAdminComponents.SimpleChart
                title="Response Volume"
                data={[
                  { label: 'Week 1', value: 234 },
                  { label: 'Week 2', value: 298 },
                  { label: 'Week 3', value: 276 },
                  { label: 'Week 4', value: 312 }
                ]}
                type="line"
              />
            </Suspense>
          </div>
        </div>

        {/* Quick Actions Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card 
            className="hover:shadow-lg transition-all duration-200 cursor-pointer group" 
            onClick={() => router.push('/admin/users')}
            {...AdminComponentPreloader.preloadOnHover(
              'UserAnalyticsDashboard',
              () => import('@/components/admin/UserAnalyticsDashboard')
            )}
          >
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <Users className="h-8 w-8 text-blue-500 group-hover:scale-110 transition-transform" />
                <Badge variant="secondary">{stats.userStats.total_users}</Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <h3 className="font-semibold text-lg mb-2">User Management</h3>
              <p className="text-sm text-gray-600 mb-4">
                View, edit, and manage user accounts and permissions
              </p>
              <div className="flex items-center text-sm text-blue-600 group-hover:text-blue-700">
                <span>Manage Users</span>
                <Activity className="h-4 w-4 ml-1 group-hover:translate-x-1 transition-transform" />
              </div>
            </CardContent>
          </Card>

          <Card 
            className="hover:shadow-lg transition-all duration-200 cursor-pointer group" 
            onClick={() => router.push('/admin/content/moderation')}
            {...AdminComponentPreloader.preloadOnHover(
              'ContentModerationDashboard',
              () => import('@/components/admin/ContentModerationDashboard')
            )}
          >
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <Shield className="h-8 w-8 text-orange-500 group-hover:scale-110 transition-transform" />
                <Badge variant="destructive">8</Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <h3 className="font-semibold text-lg mb-2">Content Moderation</h3>
              <p className="text-sm text-gray-600 mb-4">
                Review and moderate user-generated content
              </p>
              <div className="flex items-center text-sm text-orange-600 group-hover:text-orange-700">
                <span>Review Content</span>
                <AlertTriangle className="h-4 w-4 ml-1 group-hover:translate-x-1 transition-transform" />
              </div>
            </CardContent>
          </Card>

          <Card 
            className="hover:shadow-lg transition-all duration-200 cursor-pointer group" 
            onClick={() => router.push('/admin/training')}
            {...AdminComponentPreloader.preloadOnHover(
              'AdminTrainingManager',
              () => import('@/components/AdminTrainingManager')
            )}
          >
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <Brain className="h-8 w-8 text-purple-500 group-hover:scale-110 transition-transform" />
                <Badge variant="secondary">{stats.systemStats.active_training_jobs}</Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <h3 className="font-semibold text-lg mb-2">AI Training</h3>
              <p className="text-sm text-gray-600 mb-4">
                Manage AI model training pipeline and GPU resources
              </p>
              <div className="flex items-center text-sm text-purple-600 group-hover:text-purple-700">
                <span>Manage Training</span>
                <Brain className="h-4 w-4 ml-1 group-hover:translate-x-1 transition-transform" />
              </div>
            </CardContent>
          </Card>

          <Card 
            className="hover:shadow-lg transition-all duration-200 cursor-pointer group" 
            onClick={() => router.push('/admin/monitoring/system')}
            {...AdminComponentPreloader.preloadOnHover(
              'SystemHealthDashboard',
              () => import('@/components/admin/SystemHealthDashboard')
            )}
          >
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <Server className="h-8 w-8 text-green-500 group-hover:scale-110 transition-transform" />
                <Badge className="bg-green-100 text-green-800">Healthy</Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <h3 className="font-semibold text-lg mb-2">System Health</h3>
              <p className="text-sm text-gray-600 mb-4">
                Monitor system performance and resource usage
              </p>
              <div className="flex items-center text-sm text-green-600 group-hover:text-green-700">
                <span>View Metrics</span>
                <TrendingUp className="h-4 w-4 ml-1 group-hover:translate-x-1 transition-transform" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Recent Activity - Lazy Loaded */}
        <Suspense fallback={<AdminModuleLoader message="Loading recent activity..." />}>
          <LazyAdminComponents.ActivityFeed
            title="Recent Admin Activity"
            activities={[
              {
                id: '1',
                type: 'training',
                title: 'Training job completed',
                description: 'Model training for user@example.com finished successfully',
                timestamp: '5 minutes ago',
                user: 'System'
              },
              {
                id: '2',
                type: 'user',
                title: 'New user registration',
                description: 'Sarah Johnson joined and completed onboarding',
                timestamp: '15 minutes ago',
                user: 'Registration System'
              },
              {
                id: '3',
                type: 'security',
                title: 'Content flagged for review',
                description: 'AI system flagged response for potential policy violation',
                timestamp: '25 minutes ago',
                user: 'Content Moderator AI'
              },
              {
                id: '4',
                type: 'system',
                title: 'System backup completed',
                description: 'Daily backup completed successfully (2.3 GB)',
                timestamp: '1 hour ago',
                user: 'Backup Service'
              }
            ]}
            onSeeAll={() => router.push('/admin/security/audit')}
          />
        </Suspense>
      </div>
    </AdminLayout>
  )
}